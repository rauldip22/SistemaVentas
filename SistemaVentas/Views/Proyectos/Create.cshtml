@model SistemaVentas.Models.Proyectos

@{
    ViewBag.Title = "Create";
}
@*<script type="text/javascript">
    $.validator.methods.number = function (value, element) {
        value = floatValue(value);
        return this.optional(element) || !isNaN(value);
    }
    $.validator.methods.range = function (value, element, param) {
        value = floatValue(value);
        return this.optional(element) || (value >= param[0] && value <= param[1]);
    }

    function floatValue(value) {
        return parseFloat(value.replace(",", "."));
    }
</script>*@
<h2>Crear proyecto</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Proyectos</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Importe, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Importe, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Importe, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IdVendedor, "Vendedor", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IdVendedor", (SelectList) ViewBag.VendedorId, "Seleccione",htmlAttributes: new { @class = "form-control" })
                @*@Html.DropDownList("IdVendedor", null, htmlAttributes: new { @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.IdVendedor, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Porcentaje, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    var listaPorcentajes = new SelectList(
                        new List<SelectListItem>
                        {
            new SelectListItem {Text = "40%", Value = "40%"},
            new SelectListItem {Text = "60%", Value = "60%"},
            new SelectListItem {Text = "80%", Value = "80%"},
            new SelectListItem {Text = "Ganada", Value = "Ganada"},
            new SelectListItem {Text = "Perdida", Value = "Perdida"},
                        }, "Value", "Text");
                }

                @Html.DropDownListFor(model => model.Porcentaje, (SelectList)listaPorcentajes, "Seleccione", htmlAttributes: new { @class = "form-control" })
                @*@Html.EditorFor(model => model.Porcentaje, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.Porcentaje, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Volver a la lista", "Listar")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
@*<script type="text/javascript">
    $.validator.methods.number = function (value, element) {
        value = floatValue(value);
        return this.optional(element) || !isNaN(value);
    }
    $.validator.methods.range = function (value, element, param) {
        value = floatValue(value);
        return this.optional(element) || (value >= param[0] && value <= param[1]);
    }

    function floatValue(value) {
        return parseFloat(value.replace(",", "."));
    }
</script>*@